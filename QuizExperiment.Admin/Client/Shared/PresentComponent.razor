@using QuizExperiment.Admin.Client.Enums
@using QuizExperiment.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IApplicationInsights AppInsights


@if (_isLoaded)
{
    
        @if (_state == AdminUserState.WaitingForGameStart)
        {
            <GameStart Users
            ="@_users" 
            QuestionSetId="@Id" 
            OnGameStarted="@OnGameStarted"
            OnGameRegistered="@OnGameRegistered"/>
        }

        @if (_state == AdminUserState.WaitingForAnswers)
        {
            if (_currentQuestion is not null)
            {
                <SingleAnswerMultiSelectQuestionDisplay
                Question="@_currentQuestion.Title" 
                Options="@_currentQuestion.Options" 
                QuestionEndTime="@_currentQuestionEndTime"
                UserAnswerCount="@_userCurrentAnswers.Count" 
                ImageUrl="@_currentQuestion.ImageUrl" />
            }
        }

        @if (_state == AdminUserState.WaitingForQuestionStart)
        {
            if (_currentQuestion is not null)
            {
                <QuestionAnswerChart 
                CorrectAnswerIndex="@_currentQuestion.CorrectAnswerIndex" 
                Options="@_currentQuestion.Options" 
                UserAnswers="@_userCurrentAnswers" 
                OnNextQuestion="@OnNextQuestion"  />
            }
        }

        @if (_state == AdminUserState.ShowingPodium)
        {
            <Podium Leaderboard
            ="@_orderedLeaderboard"  Users
            ="@_users" />
        }

}

<div class="quiz-present-audio-container">
    <audio controls loop>
        <source src="/audio/background.mp3" />
    </audio>
    <div class="quiz-present-audio-description">Music is <a href="https://freemusicarchive.org/music/timtaj/corporate-background-music-for-advertising/corporate-background/">&quot;Corporate Background&quot; by TimTaj</a>, from Free Music Archive under CC BY-NC-ND licence</div>
</div>



@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromQuery(Name = "path")]
    public string? FolderPath { get; set; }

    private AdminUserState _state = AdminUserState.WaitingForGameStart;

    private HubConnection? _hubConnection;

    private string? _clientQuizId;

    private bool _isLoaded = false;

    private QuestionSet? _questionSet = null;

    private Dictionary<string, string> _users = new Dictionary<string, string>();

    private Dictionary<string,  UserAnswer> _userCurrentAnswers = new Dictionary<string, UserAnswer>();

    private Dictionary<string, int> _leaderboard = new Dictionary<string, int>();
    private Dictionary<string, int> _orderedLeaderboard = new Dictionary<string, int>();

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private int _currentQuestionIndex = 0;

    private MultipleChoiceQuestion? _currentQuestion = null;

    private DateTime _currentQuestionEndTime;


    private async Task OnGameRegistered(string clientQuizId)
    {
        _clientQuizId = clientQuizId;
        await AppInsights.TrackEvent(new EventTelemetry()
        {
            Name = "PresentGameRegistered",
            Properties = new Dictionary<string, object?>
            {
                { "clientQuizId", _clientQuizId }
            }
        });
        if(_hubConnection is null)
        {
            throw new NullReferenceException("PresentComponent: OnGameRegistered: HubConnection is null");
        }
        await _hubConnection.SendAsync("RegisterQuizSession", clientQuizId);
    }

    private async Task OnGameStarted(){
        _currentQuestionIndex = 0;
        await SendQuestion();
    }

    private async Task SendQuestion()
    {
        if(_questionSet is null)
        {
            throw new NullReferenceException("PresentComponent: SendQuestion: QuestionSet is null");
        }
        if(_questionSet.Questions is null)
        {
            throw new NullReferenceException("PresentComponent: SendQuestion: Questions Array is null");
        }
        if(_currentQuestionIndex >= _questionSet.Questions?.Count)
        {
            throw new IndexOutOfRangeException("PresentComponent: SendQuestion: Question index is out of range");
        }

        _currentQuestion = _questionSet.Questions?[_currentQuestionIndex] as MultipleChoiceQuestion;
        if(_currentQuestion is null)
        {
            throw new NullReferenceException("PresentComponent: SendQuestion: Current Question is null");
        }

        _userCurrentAnswers.Clear();
        _currentQuestionEndTime = DateTime.Now.AddSeconds(_currentQuestion.Timeout);
        _state = AdminUserState.WaitingForAnswers;

        _cts = new CancellationTokenSource();

        await AppInsights.TrackEvent(new EventTelemetry()
        {
            Name = "PresentSendQuestion",
            Properties = new Dictionary<string, object?>
            {
                { "clientQuizId", _clientQuizId },
                { "question", _currentQuestion.Title }
            }
        });
        if(_hubConnection is null)
        {
            throw new NullReferenceException("PresentComponent: SendQuestion: HubConnection is null");
        }
        await _hubConnection.SendAsync("SendQuestion", _clientQuizId, _currentQuestion.Title, _currentQuestion.Options);

        using var tmr = new PeriodicTimer(TimeSpan.FromSeconds(_currentQuestion.Timeout));
        await tmr.WaitForNextTickAsync(_cts.Token);

        tmr.Dispose();
        await CloseQuestion();
        StateHasChanged();
    }

    private async Task SendFinalPositions()
    {
        for (int i = 0; i < _orderedLeaderboard.Count; i++)
        {
            var user = _orderedLeaderboard.ElementAt(i);
            if(_hubConnection is null)
            {
                throw new NullReferenceException("PresentComponent: SendFinalPositions: HubConnection is null");
            }
            await _hubConnection.SendAsync("SendPlayerPosition", _clientQuizId, user.Key, i + 1, user.Value);

        }

    }

    private async Task OnNextQuestion()
    {
        if(_questionSet is null)
        {
            throw new NullReferenceException("PresentComponent: OnNextQuestion: QuestionSet is null");
        }
        if(_questionSet.Questions is null)
        {
            throw new NullReferenceException("PresentComponent: OnNextQuestion: Questions Array is null");
        }

        if(_currentQuestionIndex + 1 >= _questionSet.Questions.Count)
        {
            //Show the final leaderboard
            _state = AdminUserState.ShowingPodium;
            await SendFinalPositions();
        }
        else
        {
            _currentQuestionIndex += 1;
            await SendQuestion();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Load the requested question set

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = user.Claims.FirstOrDefault(r => r.Type == "oid")?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            throw new NullReferenceException("PresentComponent: OnInitializedAsync: User ID is null or empty");
        }

        var quizId = Id;
        if (!string.IsNullOrWhiteSpace(FolderPath))
        {
            quizId = $"{FolderPath}/{Id}";
        }

        var response = await Http.GetAsync($"questionset/get?userId={userId}&id={quizId}");

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the quiz! {errorMessage}");
            return;
        }

        _questionSet = await response.Content.ReadFromJsonAsync<QuestionSet>();

        // Start the connection to signalR.

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/quizhub"))
            .Build();

        _hubConnection.On<string, string, string>("UserJoined", async (quizId, userName, connectionId) =>
        {
            _users.Add(connectionId, userName);
            await AppInsights.TrackEvent(new EventTelemetry()
            {
                Name = "PresentUserJoined",
                Properties = new Dictionary<string, object?>
                {
                    { "clientQuizId", _clientQuizId },
                    { "userName", userName },
                    { "connectionId", connectionId }
                }
            });
            StateHasChanged();
        });

        _hubConnection.On<string, string, int, double>("ClientAnswerReceived", async (quizId, clientConnectionId, answerIndex, timeTaken) =>
        {
            _userCurrentAnswers.Add(clientConnectionId, new UserAnswer { AnswerIndex = answerIndex, TimeTaken = timeTaken } );
            if(_userCurrentAnswers.Count >= _users.Count)
            {
                await CloseQuestion();
            }

            await AppInsights.TrackEvent(new EventTelemetry()
            {
                Name = "PresentClientAnswerReceived",
                Properties = new Dictionary<string, object?>
                {
                    { "clientQuizId", _clientQuizId },
                    { "question", _currentQuestion?.Title },
                    { "answerIndex", answerIndex },
                    { "timeTaken", timeTaken },
                    { "clientConnectionId", clientConnectionId }
                }
            });
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        _isLoaded = true;


    }

    private async Task CloseQuestion()
    {
        _cts.Cancel();

        if(_currentQuestion is null)
        {
            throw new NullReferenceException("PresentComponent: CloseQuestion: Current Question is null");
        }

        var questionMaxMs = (double)(_currentQuestion.Timeout * 1000);

        var correctAnswers = _userCurrentAnswers
            .Where(r => _currentQuestion.CorrectAnswerIndex == r.Value.AnswerIndex)
            .OrderByDescending(r => r.Value.TimeTaken)
            .Select(r=>new { 
                UserId = r.Key, 
                AnswerIndex = r.Value.AnswerIndex, 
                Score = (int)(((questionMaxMs - r.Value.TimeTaken) / questionMaxMs) * 1000), 
                TimeTaken = r.Value.TimeTaken  })
            .ToArray();

        var incorrectAnswers = _userCurrentAnswers
            .Where(r => _currentQuestion.CorrectAnswerIndex != r.Value.AnswerIndex)
            .Select(r=>new { UserId = r.Key, AnswerIndex = r.Value.AnswerIndex, Score = 0, TimeTaken = r.Value.TimeTaken  })
            .ToArray();

        var noAnswer = _users.Where(r => !_userCurrentAnswers.ContainsKey(r.Key))
                        .Select(r => new { UserId = r.Key, AnswerIndex = -1, Score = 0, TimeTaken = 0.0 })
                        .ToArray();

        var unionAnswers = correctAnswers.Union(incorrectAnswers).ToArray();
        unionAnswers = unionAnswers.Union(noAnswer).ToArray();

        foreach(var c in unionAnswers)
        {
            _leaderboard[c.UserId] = (_leaderboard.ContainsKey(c.UserId) ? _leaderboard[c.UserId] : 0) + c.Score;
        }

        _orderedLeaderboard = _leaderboard.OrderByDescending(r => r.Value).ToDictionary(k=>k.Key, v=>v.Value);

        await AppInsights.TrackEvent(new EventTelemetry()
        {
            Name = "PresentSendAnswerResult",
            Properties = new Dictionary<string, object?>
            {
                { "clientQuizId", _clientQuizId },
                { "question", _currentQuestion.Title }
            }
        });

        if(_hubConnection is null)
        {
            throw new NullReferenceException("PresentComponent: CloseQuestion: HubConnection is null");
        }
        if(_questionSet is null)
        {
            throw new NullReferenceException("PresentComponent: CloseQuestion: QuestionSet is null");
        }
        if(_questionSet.Questions is null)
        {
            throw new NullReferenceException("PresentComponent: CloseQuestion: Questions Array is null");
        }
        foreach (var c in unionAnswers)
        {
            await _hubConnection.SendAsync("SendAnswerResult", _clientQuizId,
            c.UserId,
            _currentQuestion.CorrectAnswerIndex,
            _leaderboard[c.UserId],
            (_orderedLeaderboard.Keys.ToList().IndexOf(c.UserId) + 1),
            (_currentQuestionIndex + 1 >= _questionSet.Questions.Count));
        }

        _state = AdminUserState.WaitingForQuestionStart;

    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


}
