@using QuizExperiment.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager

<div class="d-flex flex-column min-vh-100 justify-content-center align-items-center">
    <div class="my-3 fs-2 fw-bold">Scan the QR code to join the quiz</div>
    <img class="img-fluid rounded img-qrcode" src="/quiz/qrcode?clientQuizId=@_clientQuizId" />
    <div class="my-3 fs-4">Or visit <a href="@( Configuration.GetValue<string>("ClientJoinLink") )">@(Configuration.GetValue<string>("ClientJoinLink"))</a> and enter the code</div>
    <div class="my-3 fs-2 fw-bold">@_clientQuizId</div>
    <button class="btn btn-success my-3 btn-primary-action" @onclick="@(e=> OnGameStarted.InvokeAsync())">
        START QUIZ >
    </button>
    @if (Users?.Count > 0)
    {
        <div class="d-flex flex-column justify-content-center align-items-center min-vw-100 player-icon-container">
            <div class="fs-5">Current players (@(Users.Count))</div>
            <div class="d-flex flex-wrap mt-1">
                @foreach (var u in Users)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(1)" >
                        <GameStartPlayer PlayerName="@u.Value" />
                    </Animate>
                }
            </div>
    </div>
    }
</div>
@code {
    [Parameter]
    public EventCallback OnGameStarted { get; set; }

    [Parameter]
    public EventCallback<string> OnGameRegistered { get; set; }

    [Parameter]
    public string? QuestionSetId { get; set; }

    [Parameter]
    public Dictionary<string,string>? Users { get; set; }

    private string? _clientQuizId;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"quiz/newid?questionSetId={QuestionSetId}");
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }
        _clientQuizId = await response.Content.ReadAsStringAsync();
        await OnGameRegistered.InvokeAsync(_clientQuizId);
        return;
    }
}
