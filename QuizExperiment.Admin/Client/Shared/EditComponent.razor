@using QuizExperiment.Models
@using System.Text.Json
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IApplicationInsights AppInsights
@inject IToastService toastService

@if (_isLoaded)
{
    if(_questionSet is not null)
    {
        <!--Page Title bar -->
        <nav class="navbar navbar-dark" style="background-color: #585555; margin-top: 69px">
            <div class="container-fluid">
                <span class="ms-4 fs-4 text-light" style="padding-left:70px;">Quiz Editor</span>
                <div class="d-flex flex-row align-items-center justify-content-end">
                    <div class="mx-2">
                        <button class="btn btn-outline-danger text-light title-bar-button" @onclick="SaveAndClose">Close</button>
                    </div>
                    <div class="mx-2">
                        <button class="btn btn-outline-primary text-light title-bar-button" @onclick="SaveAndContinue">Save</button>
                    </div>
                    <div class="mx-2">
                        <button class="btn btn-outline-warning text-light title-bar-button" @onclick="SaveAndPresent">Present</button>
                    </div>
                </div>
            </div>
        </nav>
        <!--Quiz Title bar -->
        <nav class="navbar navbar-dark" style="background-color: #979696;">
            <div class="container-fluid">
                <div class="d-flex flex-row align-items-center w-50" style="padding-left:93px;">
                    <div class="pe-3">
                        <span class="fs-5 text-light">Quiz Name</span>
                    </div>
                    <div class="flex-fill">
                        <input @bind="@_questionSet.Title" type="text" class="form-control" placeholder="Quiz name" required="required" />
                    </div>
                </div>
                <div class="d-flex flex-row align-items-center w-50" style="padding-left:93px;padding-right:93px;">
                    <div class="pe-3">
                        <span class="fs-5 text-light">Folder (Optional)</span>
                    </div>
                    <div class="flex-fill">
                        <input @bind="@FolderPath" type="text" class="form-control" placeholder="Folder Path (e.g. top/2025)" />
                    </div>
                </div>
            </div>
        </nav>

        if (!AreAllQuestionsValid)
        {
            <!-- Question Set Validation Message -->
            <nav class="navbar navbar-danger navbar-question-validation">
                <div class="container-fluid">
                    <div class="d-flex flex-row align-items-center w-50" style="padding-left:93px;">
                        <div class="flex-fill">
                            <span class="fs-5 text-light">Make sure all questions have a correct answer, title, image and timeout!</span>
                        </div>
                    </div>
                </div>
            </nav>
        }


        <div class="d-flex flex-column justify-content-center quiz-edit-question">
            <div class="d-flex flex-row quiz-edit-question-list-panel flex-fill">
                <div class="flex-grow-1 quiz-edit-question-scroll-panel">
                    @if(_currentQuestion == null)
                    {
                        <div class="d-flex flex-column align-items-center">
                            <div class="my-3 fs-4 fw-bold">Click the "+ NEW QUESTION" button to begin building your quiz</div>
                        </div>
                    }
                    else
                    {
                        if(_currentQuestion is MultipleChoiceQuestion)
                        {

                            <EditSingleAnswerMultiSelectQuestion Question="_currentQuestion" />
                        }
                        else if(_currentQuestion is TrueFalseQuestion)
                        {
                            @* <EditTrueFalseQuestion Question="_currentQuestion" /> *@
                            <div class="d-flex flex-column align-items-center">
                                <div class="my-3 fs-4 fw-bold">PLACEHOLDER FOR TRUE FALSE QUESTION TYPE</div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex flex-column align-items-center">
                                <div class="my-3 fs-4 fw-bold">Unknown Question Type</div>
                            </div>
                        }
                        
                    }
                </div>
                <QuestionList Questions="_questions"
                OnEditQuestion="OnEditQuestion"
                OnDeleteQuestion="OnDeleteQuestion"
                OnAddQuestion="OnAddQuestion"
                OnAddGeneratedQuestion="OnAddGeneratedQuestion"/>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromQuery(Name = "path")]
    public string? FolderPath { get; set; }

    private bool _isLoaded = false; 

    private string? OriginalFolderPath { get; set; }

    private QuestionSet? _questionSet = new QuestionSet();

    private List<Question> _questions = new List<Question>();

    private Question? _currentQuestion;

    private string? _userId;

    private void OnEditQuestion(Question question)
    {

        _currentQuestion = question;
    }

    private void OnDeleteQuestion(Question question)
    {
        _questions.Remove(question);
    }

    private void OnAddQuestion()
    {
        _currentQuestion = new MultipleChoiceQuestion()
        {
            Options = new[] {"","","",""},
            Timeout = 20,
            ImageUrl = "",
            Title = "",          
            CorrectAnswerIndex = -1
        };

        _questions.Add(_currentQuestion); 
    }

    private void OnAddGeneratedQuestion(Question question)
    {
        _questions.Add(question); 
        _currentQuestion = question;
    }

    public bool AreAllQuestionsValid
    {
        get
        {
            return _questions.All(r => r.IsValid);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToArray();
        _userId = claims.First(r => r.Type == "oid").Value;

        OriginalFolderPath = FolderPath;
        var quizId = Id;
        if(!string.IsNullOrWhiteSpace(FolderPath))
        {
            quizId = $"{FolderPath}/{Id}";
        }

        var response = await Http.GetAsync($"questionset/get?userId={_userId}&id={quizId}");

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the quiz! {errorMessage}");
            return;
        }

        _questionSet = await response.Content.ReadFromJsonAsync<QuestionSet>();
        if(_questionSet is null)
        {
            throw new NullReferenceException($"EditComponent: QuestionSet (UserID: {_userId}, Id: {Id}) returned from API is null!");
        }

        if (_questionSet.Questions == null)
        {
            _questionSet.Questions = new List<Question>();
        }

        _questions = _questionSet.Questions;
        _currentQuestion = _questions.Count > 0
                            ? _questions[0] 
                            : null;

        _isLoaded = true;
        return;
    }

    private void ShowValidationAlertMessage()
    {
        string message = "Unable to save, One or more questions have validation errors!";
        toastService.ShowError(message);
    }


    private async Task SaveAndPresent()
    {
        if (!AreAllQuestionsValid)
        {
            ShowValidationAlertMessage();
            return;
        }
        await Save();
        NavigationManager.NavigateTo($"/present/{_questionSet?.Id}");
    }

    private async Task SaveAndContinue()
    {
        if (!AreAllQuestionsValid)
        {
            ShowValidationAlertMessage();
            return;
        }
        await Save();
    }

    private async Task Save()
    {

        _questionSet.FolderPath = FolderPath;
        if (FolderPath != OriginalFolderPath)
        {
            // Need to remove the original quiz before saving a new one.
            var originalId = _questionSet.Id;
            if(!string.IsNullOrWhiteSpace(OriginalFolderPath))
            {
                originalId = $"{OriginalFolderPath}/{Id}";
            }

            var deleteResponse = await Http.DeleteAsync($"questionset/delete?userId={_userId}&id={originalId}");
            if (!deleteResponse.IsSuccessStatusCode)
            {
                var errorMessage = deleteResponse.ReasonPhrase;
                Console.WriteLine($"There was an error deleting the original quiz! {errorMessage}");
            }
        }

        var response = await Http.PostAsJsonAsync($"questionset/upsert", _questionSet);
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error saving the question set! {errorMessage}");
        }

        await AppInsights.TrackEvent(new EventTelemetry()
        {
            Name = "QuestionSetUpserted", 
            Properties = new Dictionary<string, object?>
            {
                { "userId", _userId },
                { "Id", _questionSet?.Id },
            }
        });
    }

    private async Task SaveAndClose()
    {
        if (!AreAllQuestionsValid)
        {
            ShowValidationAlertMessage();
            return;
        }
        await Save();
        NavigationManager.NavigateTo($"/manage");
    }
}
