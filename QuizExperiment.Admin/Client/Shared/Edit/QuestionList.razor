@using QuizExperiment.Models

<div class="quiz-edit-question-list-container d-flex flex-column align-items-center">
    <div class="quiz-edit-question-add-container">
        <button class="btn btn-success my-3 btn-primary-action" @onclick="ShowQuestionTypeModal">
            + NEW QUESTION
        </button>
        <button class="btn btn-success btn-copilot" style="padding:3px" data-bs-toggle="modal" data-bs-target="#copilotModal">
            <img src="images/copilot.png" style="height:30px;" />
        </button>
    </div>
    <div class="quiz-edit-question-count fs-5">@(Questions?.Count) question@(GetQuestionCountSuffix())</div>
    <div class="d-flex flex-column quiz-edit-question-list flex-grow-1 flex-fill">
        @if (Questions is not null)
        {
            foreach (var question in Questions.Select((v, index) => new { Value = v, Index = index }))
            {
                <QuestionListItem Question="question.Value"
                    QuestionIndex=question.Index+1
                    OnEditQuestion="OnEditQuestion"
                    OnDeleteQuestion="OnDeleteQuestion" />
            }
        }
    </div>
</div>

<QuestionTypePickerModal @ref="_questionTypeModal" OnQuestionTypeSelected="OnQuestionTypeSelected" />
<CopilotModal AddNewQuestion="OnAddGeneratedQuestion" />

@code {
    [Parameter]
    public List<Question>? Questions { get; set; }

    [Parameter]
    public EventCallback<Question> OnEditQuestion { get; set; }

    [Parameter]
    public EventCallback<Question> OnDeleteQuestion { get; set; }

    [Parameter]
    public EventCallback<string> OnAddQuestion { get; set; }

    [Parameter]
    public EventCallback<Question> OnAddGeneratedQuestion { get;set; }

    private QuestionTypePickerModal? _questionTypeModal;

    private string GetQuestionCountSuffix()
    {
        return Questions?.Count == 1 ? "" : "s";
    }

    private void ShowQuestionTypeModal()
    {
        _questionTypeModal?.Show();
    }

    private async Task OnQuestionTypeSelected(string? type)
    {
        if (!string.IsNullOrEmpty(type))
        {
            await OnAddQuestion.InvokeAsync(type);
        }
    }
}
